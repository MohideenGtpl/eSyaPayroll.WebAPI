using eSyaPayroll.DL.Entities;
using eSyaPayroll.DO;
using eSyaPayroll.IF;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace eSyaPayroll.DL.Repository
{
   public class EmployeeRepository:IEmployeeRepository
    {
        #region Employee Details Info

        public async Task<List<DO_EmployeeClass>> GetEmployeeClassforCombo()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEbeemc
                        .Where(w => w.ActiveStatus)
                        .Select(r => new DO_EmployeeClass
                        {
                            EmployeeClass=r.EmployeeClass,
                             ClassDesc=r.ClassDesc,

                        }).OrderBy(o => o.ClassDesc).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DO_EmployeeInfo> GetEmployeesInfobySuffix(string Alphabet)
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    List<GtEpyemh> emp_list = new List<GtEpyemh>();

                    if (!string.IsNullOrEmpty(Alphabet))
                    {

                        emp_list = db.GtEpyemh.Where(x => x.EmployeeName.ToUpper().Trim().StartsWith(Alphabet.ToUpper().Trim())).ToList();
                    }
                    if (Alphabet == "All")
                    {
                        emp_list = db.GtEpyemh.ToList();
                    }
                    var result = emp_list.
                     Select(x => new DO_EmployeeInfo
                     {
                         BusinessKey=x.BusinessKey,
                         EmployeeNumber=x.EmployeeNumber,
                         EmployeeId=x.EmployeeId,
                         BiometricId=x.BiometricId,
                         Title=x.Title,
                         EmployeeName=x.EmployeeName,
                         Gender=x.Gender,
                         MobileNumber=x.MobileNumber,
                         ExemptedFromAttendance=x.ExemptedFromAttendance,
                         WillingnessToWorkInShifts=x.WillingnessToWorkInShifts,
                         EmployeeStatus=x.EmployeeStatus,
                         ActiveStatus = x.ActiveStatus,
                         FormId = x.FormId
                     }).OrderBy(x => x.EmployeeName).ToList();
                    return result;
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public async Task<DO_EmployeeInfo> GetEmployeeInfobyEmployeeNumber(int EmpNumber)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                   var ds = db.GtEpyemh.Where(x=>x.EmployeeNumber==EmpNumber).
                   Join(db.GtEpyemc, u => u.EmployeeNumber, uir => uir.EmployeeNumber,
                   (u, uir) => new { u, uir }).
                   Join(db.GtEpyems, r => r.uir.EmployeeNumber, ro => ro.EmployeeNumber, (r, ro) => new { r, ro })
                  .Select(m => new DO_EmployeeInfo
                  {
                      //Employee Details
                      BusinessKey = m.r.u.BusinessKey,
                      EmployeeNumber = m.r.u.EmployeeNumber,
                      EmployeeId = m.r.u.EmployeeId,
                      BiometricId = m.r.u.BiometricId,
                      Title = m.r.u.Title,
                      EmployeeName = m.r.u.EmployeeName,
                      Gender = m.r.u.Gender,
                      MobileNumber = m.r.u.MobileNumber,
                      ExemptedFromAttendance = m.r.u.ExemptedFromAttendance,
                      WillingnessToWorkInShifts = m.r.u.WillingnessToWorkInShifts,
                      EmployeeStatus = m.r.u.EmployeeStatus,
                      ActiveStatus = m.r.u.ActiveStatus,
                      Photo = m.r.u.Photo,

                      //Employee Classification
                      EmployeeClass = m.r.uir.EmployeeClass,
                      EmployeeGroup = m.r.uir.EmployeeGroup,
                      EmployeePayCategory = m.r.uir.EmployeePayCategory,
                      DateProbationTill = m.r.uir.DateProbationTill,

                      //Employee Status
                      DateOfJoining = m.ro.DateOfJoining,
                      DateOfConfirmation = m.ro.DateOfConfirmation,
                      DateOfResignation = m.ro.DateOfResignation,
                      DateOfRelieving = m.ro.DateOfRelieving,
                      DateOfTermination = m.ro.DateOfTermination,
                      AnySuspension = m.ro.AnySuspension,
                      CurrentDepartment = m.ro.CurrentDepartment,
                      CurrentLocationPosted = m.ro.CurrentLocationPosted,
                      CurrentBasic = m.ro.CurrentBasic,
                      CurrentGross = m.ro.CurrentGross,
                     }).FirstOrDefaultAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertOrUpdateEmployeeInfo(DO_EmployeeInfo obj)
        {
            try
            {
                if (obj.EmployeeNumber != 0)
                {
                    return await UpdateEmployeeInfo(obj);
                }
                else
                {
                    return await InsertIntoEmployeeInfo(obj);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public async Task<DO_ReturnParameter> InsertIntoEmployeeInfo(DO_EmployeeInfo obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {

                        GtEpyemh is_empIdExists = db.GtEpyemh.FirstOrDefault(emp => emp.EmployeeId.ToUpper().Replace(" ", "") == obj.EmployeeId.ToUpper().Replace(" ", ""));
                        if (is_empIdExists == null)
                        {
                            int maxval = db.GtEpyemh.Select(e => e.EmployeeNumber).DefaultIfEmpty().Max();
                            int Emp_number = maxval + 1;
                            var emp_info = new GtEpyemh
                            {
                                BusinessKey = obj.BusinessKey,
                                EmployeeNumber = Emp_number,
                                EmployeeId = obj.EmployeeId,
                                BiometricId = obj.BiometricId,
                                Title = obj.Title,
                                EmployeeName = obj.EmployeeName,
                                Gender=obj.Gender,
                                MobileNumber=obj.MobileNumber,
                                ExemptedFromAttendance=obj.ExemptedFromAttendance,
                                WillingnessToWorkInShifts=obj.WillingnessToWorkInShifts,
                                Photo=obj.Photo,
                                EmployeeStatus=obj.EmployeeStatus,
                                ActiveStatus = obj.ActiveStatus,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtEpyemh.Add(emp_info);

                            var emp_classification = new GtEpyemc
                            {
                                BusinessKey = obj.BusinessKey,
                                EmployeeNumber = Emp_number,
                                EmployeeGroup=obj.EmployeeGroup,
                                EmployeeClass=obj.EmployeeClass,
                                EmployeePayCategory=obj.EmployeePayCategory,
                                DateProbationTill=obj.DateProbationTill,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtEpyemc.Add(emp_classification);

                            var emp_status = new GtEpyems
                            {
                                BusinessKey = obj.BusinessKey,
                                EmployeeNumber = Emp_number,
                                DateOfJoining=obj.DateOfJoining,
                                DateOfConfirmation=obj.DateOfConfirmation,
                                DateOfResignation=obj.DateOfResignation,
                                DateOfRelieving=obj.DateOfRelieving,
                                DateOfTermination=obj.DateOfTermination,
                                AnySuspension=obj.AnySuspension,
                                CurrentDepartment=obj.CurrentDepartment,
                                CurrentLocationPosted=obj.CurrentLocationPosted,
                                CurrentBasic=obj.CurrentBasic,
                                CurrentGross=obj.CurrentGross,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtEpyems.Add(emp_status);

                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, EmpNumber = Emp_number,Businesskey= obj.BusinessKey, Message = "Employee Created Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Employee Id is already Exists try another one." };
                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateEmployeeInfo(DO_EmployeeInfo obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {

                    try
                    {
                        GtEpyemh is_empIdExists = db.GtEpyemh.FirstOrDefault(emp => emp.EmployeeNumber != obj.EmployeeNumber && emp.EmployeeId.ToUpper().Replace(" ", "") == obj.EmployeeId.ToUpper().Replace(" ", ""));
                        if (is_empIdExists == null)
                        {
                            var emp_info = db.GtEpyemh.FirstOrDefault(e => e.EmployeeNumber == obj.EmployeeNumber);
                            if (obj != null)
                            {
                                    emp_info.EmployeeId = obj.EmployeeId;
                                    emp_info.BiometricId = obj.BiometricId;
                                    emp_info.Title = obj.Title;
                                    obj.EmployeeName = obj.EmployeeName;
                                    obj.Gender = obj.Gender;
                                    obj.MobileNumber = obj.MobileNumber;
                                    obj.ExemptedFromAttendance = obj.ExemptedFromAttendance;
                                    obj.WillingnessToWorkInShifts = obj.WillingnessToWorkInShifts;
                                    obj.Photo = obj.Photo;
                                    obj.EmployeeStatus = obj.EmployeeStatus;
                                    emp_info.ActiveStatus = obj.ActiveStatus;
                                    emp_info.ModifiedBy = obj.UserID;
                                    emp_info.ModifiedOn = DateTime.Now;
                                    emp_info.ModifiedTerminal = obj.TerminalID;

                                var emp_classification= db.GtEpyemc.FirstOrDefault(c => c.EmployeeNumber == obj.EmployeeNumber);
                                    emp_classification.EmployeeGroup = obj.EmployeeGroup;
                                    emp_classification.EmployeeClass = obj.EmployeeClass;
                                    emp_classification.EmployeePayCategory = obj.EmployeePayCategory;
                                    emp_classification.DateProbationTill = obj.DateProbationTill;
                                    emp_classification.ModifiedBy = obj.UserID;
                                    emp_classification.ModifiedOn = DateTime.Now;
                                    emp_classification.ModifiedTerminal = obj.TerminalID;

                                var emp_status = db.GtEpyems.FirstOrDefault(s => s.EmployeeNumber == obj.EmployeeNumber);
                                    emp_status.DateOfJoining = obj.DateOfJoining;
                                    emp_status.DateOfConfirmation = obj.DateOfConfirmation;
                                    emp_status.DateOfResignation = obj.DateOfResignation;
                                    emp_status.DateOfRelieving = obj.DateOfRelieving;
                                    emp_status.DateOfTermination = obj.DateOfTermination;
                                    emp_status.AnySuspension = obj.AnySuspension;
                                    emp_status.CurrentDepartment = obj.CurrentDepartment;
                                    emp_status.CurrentLocationPosted = obj.CurrentLocationPosted;
                                    emp_status.CurrentBasic = obj.CurrentBasic;
                                    emp_status.CurrentGross = obj.CurrentGross;
                                    emp_status.ModifiedBy = obj.UserID;
                                    emp_status.ModifiedOn = DateTime.Now;
                                    emp_status.ModifiedTerminal = obj.TerminalID;

                                await db.SaveChangesAsync();
                                dbContext.Commit();
                                return new DO_ReturnParameter() { Status = true, Message = "Employee Updated Successfully." };
                            }
                            else
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Couldn't find Employee Details." };
                            }
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Employee Id is already Exists try another one." };
                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #endregion Employee Details Info

        #region Employee Bank Info
        public async Task<List<DO_ERCode>> GetERCodeforCombo()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEpercd
                        .Where(w => w.ActiveStatus)
                        .Select(e => new DO_ERCode
                        {
                            Ercode = e.Ercode,
                            Erdesc = e.Erdesc,

                        }).OrderBy(o => o.Erdesc).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_EmployeeBankInfo>> GetEmployeeBankInfobyEmpNumber(int EmpNumber)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEpyebi.Where(x=>x.EmployeeNumber==EmpNumber)
                        .Select(b => new DO_EmployeeBankInfo
                        {
                            BusinessKey =b.BusinessKey,
                            EmployeeNumber=b.EmployeeNumber,
                            AccountNumber=b.AccountNumber,
                            SalaryPaymentMode=b.SalaryPaymentMode,
                            BankCode=b.BankCode,
                            Ifsccode=b.Ifsccode,
                            BankBranch=b.BankBranch,
                            AccountStatus=b.AccountStatus
                        }).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertEmployeeBankInfo(DO_EmployeeBankInfo obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {

                        GtEpyebi is_accountNumberExists = db.GtEpyebi.FirstOrDefault(ac => ac.AccountNumber.ToUpper().Replace(" ", "") == obj.AccountNumber.ToUpper().Replace(" ", ""));
                        if (is_accountNumberExists == null)
                        {
                            var bank_info = new GtEpyebi
                            {
                                BusinessKey = obj.BusinessKey,
                                EmployeeNumber = obj.EmployeeNumber,
                                AccountNumber = obj.AccountNumber,
                                SalaryPaymentMode = obj.SalaryPaymentMode,
                                BankCode = obj.BankCode,
                                Ifsccode = obj.Ifsccode,
                                BankBranch = obj.BankBranch,
                                AccountStatus = obj.AccountStatus,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtEpyebi.Add(bank_info);
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true,  Message = "Bank Information Created Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Account Number is already Exists try another one." };
                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateEmployeeBankInfo(DO_EmployeeBankInfo obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {

                    try
                    {
                        GtEpyebi is_accountNumberExists = db.GtEpyebi.FirstOrDefault(ac => ac.EmployeeNumber != obj.EmployeeNumber && ac.AccountNumber.ToUpper().Replace(" ", "") == obj.AccountNumber.ToUpper().Replace(" ", ""));
                        if (is_accountNumberExists == null)
                        {
                            var bank_info = db.GtEpyebi.FirstOrDefault(e => e.EmployeeNumber == obj.EmployeeNumber);
                            if (bank_info != null)
                            {
                                bank_info.AccountNumber = obj.AccountNumber;
                                bank_info.SalaryPaymentMode = obj.SalaryPaymentMode;
                                bank_info.BankCode = obj.BankCode;
                                bank_info.Ifsccode = obj.Ifsccode;
                                bank_info.BankBranch = obj.BankBranch;
                                bank_info.AccountStatus = obj.AccountStatus;
                                bank_info.ModifiedBy = obj.UserID;
                                bank_info.ModifiedOn = DateTime.Now;
                                bank_info.ModifiedTerminal = obj.TerminalID;
                                await db.SaveChangesAsync();
                                dbContext.Commit();
                                return new DO_ReturnParameter() { Status = true, Message = "Bank Information Updated Successfully." };
                            }
                            else
                            {
                                return new DO_ReturnParameter() { Status = false, Message = "Couldn't find Bank Information." };
                            }
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Account Number is already Exists try another one." };
                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }
        #endregion Employee Bank Info


        #region Employee Salary Info

        public async Task<List<DO_EmployeeSalaryInfo>> GetEmployeeSalaryInfobyEmpNumber(int EmpNumber)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEpyesd.Where(x=>x.EmployeeNumber==EmpNumber)
                        .Select(s => new DO_EmployeeSalaryInfo
                        {
                            BusinessKey = s.BusinessKey,
                            EmployeeNumber = s.EmployeeNumber,
                            Ercode = s.Ercode,
                            Amount=s.Amount,
                            EffectiveFrom = s.EffectiveFrom,
                            EffectiveTill = s.EffectiveTill,
                            ActiveStatus=s.ActiveStatus
                        }).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertOrUpdateEmployeeSalaryInfo(DO_EmployeeSalaryInfo obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {

                        GtEpyesd is_salExists = db.GtEpyesd.FirstOrDefault(sl =>sl.BusinessKey== obj.BusinessKey&&sl.EmployeeNumber== obj.EmployeeNumber
                        && sl.Ercode == obj.Ercode && sl.EffectiveFrom== obj.EffectiveFrom);
                        if (is_salExists == null)
                        {
                            var sal_info = new GtEpyesd
                            {
                                BusinessKey = obj.BusinessKey,
                                EmployeeNumber = obj.EmployeeNumber,
                                Ercode = obj.Ercode,
                                EffectiveFrom = obj.EffectiveFrom,
                                Amount = obj.Amount,
                                EffectiveTill = obj.EffectiveTill,
                                ActiveStatus = obj.ActiveStatus,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtEpyesd.Add(sal_info);
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Employee Salary Information Created Successfully." };
                        }
                        else
                        {
                            is_salExists.Amount = obj.Amount;
                            is_salExists.EffectiveTill = obj.EffectiveTill;
                            is_salExists.ActiveStatus = obj.ActiveStatus;
                            is_salExists.ModifiedBy = obj.UserID;
                            is_salExists.ModifiedOn = DateTime.Now;
                            is_salExists.ModifiedTerminal = obj.TerminalID;
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Employee Salary Information Updated Successfully." };

                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #endregion Employee Salary Info

        #region Employee Family Info

        public async Task<List<DO_EmployeeFamilyInfo>> GetEmployeeFamilyInfobyEmpNumber(int EmpNumber)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEpyefi.Where(x => x.EmployeeNumber == EmpNumber)
                        .Select(f => new DO_EmployeeFamilyInfo
                        {
                            BusinessKey = f.BusinessKey,
                            EmployeeNumber = f.EmployeeNumber,
                            //MaritalStatus = f.MaritalStatus,
                            SpouseName = f.SpouseName,
                            NoOfChildren = f.NoOfChildren,
                            FatherName = f.FatherName,
                            MotherName = f.MotherName
                        }).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertOrUpdateEmployeeFamilyInfo(DO_EmployeeFamilyInfo obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {

                        GtEpyefi is_familyExists = db.GtEpyefi.FirstOrDefault(sl => sl.BusinessKey == obj.BusinessKey && sl.EmployeeNumber == obj.EmployeeNumber);
                        
                        if (is_familyExists == null)
                        {
                            var family_info = new GtEpyefi
                            {
                                BusinessKey = obj.BusinessKey,
                                EmployeeNumber = obj.EmployeeNumber,
                                //MaritalStatus = obj.MaritalStatus,
                                MaritalStatus = false,
                                SpouseName = obj.SpouseName,
                                NoOfChildren = obj.NoOfChildren,
                                FatherName = obj.FatherName,
                                MotherName = obj.MotherName,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtEpyefi.Add(family_info);
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Employee Family Information Created Successfully." };
                        }
                        else
                        {
                            //is_familyExists.MaritalStatus = obj.MaritalStatus;
                            is_familyExists.SpouseName = obj.SpouseName;
                            is_familyExists.NoOfChildren = obj.NoOfChildren;
                            is_familyExists.FatherName = obj.FatherName;
                            is_familyExists.MotherName = obj.MotherName;
                            is_familyExists.ModifiedBy = obj.UserID;
                            is_familyExists.ModifiedOn = DateTime.Now;
                            is_familyExists.ModifiedTerminal = obj.TerminalID;
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Employee Family Information Updated Successfully." };

                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #endregion Employee Family Info

        #region Employee Education Info

        public async Task<List<DO_EmployeeEducationInfo>> GetEmployeeEducationInfobyEmpNumber(int EmpNumber)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEpyeei.Where(x => x.EmployeeNumber == EmpNumber)
                        .Select(e => new DO_EmployeeEducationInfo
                        {
                            BusinessKey = e.BusinessKey,
                            EmployeeNumber = e.EmployeeNumber,
                            EducationLevel = e.EducationLevel,
                            Institution = e.Institution,
                            University = e.University,
                            YearofPassing = e.YearofPassing,
                            PercentageofMarks = e.PercentageofMarks
                        }).ToListAsync();

                    return await ds;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertOrUpdateEmployeeEducationInfo(DO_EmployeeEducationInfo obj)
        {
            using (eSyaEnterprise db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {

                        GtEpyeei is_eduExists = db.GtEpyeei.FirstOrDefault(e => e.BusinessKey == obj.BusinessKey && e.EmployeeNumber == obj.EmployeeNumber
                        && e.EducationLevel.ToUpper().Replace(" ", "") == obj.EducationLevel.ToUpper().Replace(" ", ""));
                        if (is_eduExists == null)
                        {
                            var edu_info = new GtEpyeei
                            {
                                BusinessKey = obj.BusinessKey,
                                EmployeeNumber = obj.EmployeeNumber,
                                EducationLevel = obj.EducationLevel,
                                Institution=obj.Institution,
                                University = obj.University,
                                YearofPassing = obj.YearofPassing,
                                PercentageofMarks = obj.PercentageofMarks,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtEpyeei.Add(edu_info);
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Employee Educational Information Created Successfully." };
                        }
                        else
                        {
                            is_eduExists.Institution = obj.Institution;
                            is_eduExists.University = obj.University;
                            is_eduExists.YearofPassing = obj.YearofPassing;
                            is_eduExists.PercentageofMarks = obj.PercentageofMarks;
                            is_eduExists.ModifiedBy = obj.UserID;
                            is_eduExists.ModifiedOn = DateTime.Now;
                            is_eduExists.ModifiedTerminal = obj.TerminalID;
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Employee Educational Information Updated Successfully." };

                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #endregion Employee Education Info
    }
}
